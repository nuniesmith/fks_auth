name: fks_auth CI

concurrency:
  group: fks_auth-ci-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Dockerfile'
      - 'requirements*.txt'
      - '.github/workflows/fks_auth-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Dockerfile'
      - 'requirements*.txt'
      - '.github/workflows/fks_auth-ci.yml'
  workflow_dispatch: {}

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements.dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi

      - name: Run pytest (if tests/ exists)
        run: |
          if [ -d tests ]; then pytest -q --maxfail=1 --disable-warnings --color=yes; else echo 'No tests directory'; fi

      - name: Upload pytest cache
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-cache
          path: .pytest_cache
          if-no-files-found: ignore

  docker-build:
    name: Docker Build & Smoke
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    env:
      SERVICE_SLUG: auth
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: local/fks
          tags: |
            type=ref,event=branch,prefix=${{ env.SERVICE_SLUG }}-
            type=sha,prefix=${{ env.SERVICE_SLUG }}-
            type=raw,value=${{ env.SERVICE_SLUG }}-latest

      - name: Build image (no push)
        uses: docker/build-push-action@v5
        with:
            context: .
            file: Dockerfile
            push: false
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            build-args: |
              SERVICE_RUNTIME=python
              SERVICE_TYPE=auth
              BUILD_TYPE=cpu

      - name: Smoke test
        run: |
          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
            docker run -d --rm -e SERVICE_PORT=8080 -p 8081:8080 --name fks_auth_test "$TAG" || (echo 'Run failed'; exit 1)
            echo 'Waiting for /health (mapped 8081->8080)...'
            for i in {1..25}; do
              sleep 2
              if curl -sf http://localhost:8081/health >/dev/null; then
                echo 'Healthy'; curl -s http://localhost:8081/health | head -c 400; OK=1; break; fi
              printf '.'
            done
            echo ''
            if [ "${OK:-}" != 1 ]; then echo 'Unhealthy'; docker logs fks_auth_test || true; exit 1; fi
            docker logs fks_auth_test | tail -n 60 || true
            docker stop fks_auth_test

      - name: Export image artifact
        run: |
          docker save $(echo "${{ steps.meta.outputs.tags }}" | head -n1) | gzip > fks_auth-image.tar.gz

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: fks_auth-image
          path: fks_auth-image.tar.gz

  # Optional: Compose & Monitoring validations could be re-added if still needed in this service-specific workflow.
